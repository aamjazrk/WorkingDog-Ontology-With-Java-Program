/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package WDPack;

import org.apache.jena.query.QuerySolution;
import org.apache.jena.rdf.model.RDFNode;

import WDPack.OpenOWL;

import java.nio.charset.Charset;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.GroupLayout;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JComboBox;
import java.awt.Color;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import java.util.*;
import java.lang.*;

/**
 *
 * @author CCS
 */
public class DisplayFrame extends javax.swing.JFrame {

	public ArrayList<String> ListComponent = new ArrayList<String>(); // for name list
	public String ValueListComponent = "";
	public Integer TempValueBreed = 0;
	public ArrayList<String> ListNames = new ArrayList<String>(); // for name list
	public String ValueListNames = "";
	public ArrayList<String> ListOption = new ArrayList<String>(); // for name list
	public String ValueListOption = "";
	public ArrayList<String> ListAppearance = new ArrayList<String>(); // for name list
	public String ValueListAppearance = "";

	/**
	 * Creates new form DisplayFrame
	 */
	public DisplayFrame() {
		setBackground(new Color(245, 128, 255));
		getContentPane().setBackground(new Color(213, 130, 253));
		initComponents();

		try {
			// OntModel model = OpenOWL.OpenConnectOWL();

			System.out.println("Get Component");
			String queryString;
			queryString = "PREFIX Dogworking: <http://localhost/Dogworking#>"
					+ "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> "
					+ "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>" + "SELECT  (str(?name) as ?WorkType) "
					+ "where { ?x rdfs:subClassOf Dogworking:Working_Dog_Type. " + "?x rdfs:label ?name" + " }";

			org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); // all method ExecSparQl from
																						// OpenOWL class
			ListComponent.add("-");
			while (results.hasNext()) {

				QuerySolution soln = results.nextSolution();
				String Component = soln.getLiteral("WorkType").getString();
				// test --
				System.out.println("Computer " + Component.toString());
				ListComponent.add(Component.toString());

				RDFNode x = soln.get("Propertyval");

				String xx = String.valueOf(x);

				java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);

				String xs = xxx.toString();

			}
			ComponentList.removeAllItems(); // combobox nameList
			for (int i = 0; i < ListComponent.size(); i++) {

				ComponentList.addItem(ListComponent.get(i));
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		// get Appearance

		try {
			// OntModel model = OpenOWL.OpenConnectOWL();

			System.out.println("Get Appearance");
			String queryString;
			queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> "
					+ "PREFIX DogWorking: <http://localhost/Dogworking#> " + "SELECT (str(?name) as ?Appearance ) "
					+ "WHERE { " + "	?appearance rdfs:subClassOf DogWorking:Appearance "
					+ "FILTER (?appearance != DogWorking:Color) " + "?appearance rdfs:label ?name " + "}";

			org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); // all method ExecSparQl from
																						// OpenOWL class
			ListAppearance.add("-");
			while (results.hasNext()) {

				QuerySolution soln = results.nextSolution();
				String Appearance = soln.getLiteral("Appearance").getString();
				// test --
				System.out.println("Appearance " + Appearance.toString());
				ListAppearance.add(Appearance.toString());

				RDFNode x = soln.get("Propertyval");

				String xx = String.valueOf(x);

				java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);

				String xs = xxx.toString();

			}
			AppearanceList.removeAllItems(); // combobox nameList
			for (int i = 0; i < ListAppearance.size(); i++) {

				AppearanceList.addItem(ListAppearance.get(i));
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel2 = new javax.swing.JPanel();
		jPanel2.setBackground(new Color(254, 238, 97));
		jButton2 = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		TableComputer = new javax.swing.JTable();
		NameList = new javax.swing.JComboBox<>();
		ComponentList = new javax.swing.JComboBox<>();
		AppearanceList = new javax.swing.JComboBox<>();
		OptionList = new javax.swing.JComboBox<>();
		jLabel1 = new javax.swing.JLabel();
		jLabel1.setText("Appearance:");
		jLabel2 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Semantic Search: Computer");

		jButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
		jButton2.setText("Search");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		TableComputer.setModel(new DefaultTableModel(
				new Object[][] { { null, null, null, null, null, null, null, null, null, null },
						{ null, null, null, null, null, null, null, null, null, null },
						{ null, null, null, null, null, null, null, null, null, null },
						{ null, null, null, null, null, null, null, null, null, null },
						{ null, null, null, null, null, null, null, null, null, null },
						{ null, null, null, null, null, null, null, null, null, null },
						{ null, null, null, null, null, null, null, null, null, null },
						{ null, null, null, null, null, null, null, null, null, null },
						{ null, null, null, null, null, null, null, null, null, null },
						{ null, null, null, null, null, null, null, null, null, null }, },
				new String[] { "Breed", "Coat_Length", "Size", "Active", "Agressive", "Clever", "Hearing_Skill","Color",
						"Mobility", "Sensitive_Nose", "Strength" }));
		jScrollPane1.setViewportView(TableComputer);

		NameList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
		NameList.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				NameListActionPerformed(evt);
			}
		});

		ComponentList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
		ComponentList.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ComponentListActionPerformed(evt);
			}
		});

		OptionList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
		OptionList.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				OptionListActionPerformed(evt);
			}
		});

		AppearanceList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
		AppearanceList.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				AppearanceListActionPerformed(evt);
			}
		});

		jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18));

		jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
		jLabel2.setText("Option:");

		jLabel4.setText("Working Type:");
		jLabel4.setFont(new Font("Tahoma", Font.PLAIN, 18));

		jLabel5.setText("Subtype of Working:");
		jLabel5.setFont(new Font("Tahoma", Font.PLAIN, 18));

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2Layout.setHorizontalGroup(
			jPanel2Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
						.addGroup(jPanel2Layout.createSequentialGroup()
							.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
								.addGroup(jPanel2Layout.createSequentialGroup()
									.addGap(44)
									.addComponent(jLabel1))
								.addGroup(Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
									.addGap(25)
									.addComponent(jLabel4, GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)))
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING, false)
								.addComponent(ComponentList, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(AppearanceList, 0, 370, Short.MAX_VALUE))
							.addPreferredGap(ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
							.addGroup(jPanel2Layout.createParallelGroup(Alignment.TRAILING)
								.addComponent(jLabel5)
								.addComponent(jLabel2))
							.addPreferredGap(ComponentPlacement.UNRELATED)
							.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING, false)
								.addComponent(OptionList, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(NameList, 0, 454, Short.MAX_VALUE))
							.addGap(102))
						.addGroup(jPanel2Layout.createSequentialGroup()
							.addContainerGap()
							.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 1363, Short.MAX_VALUE))
						.addGroup(jPanel2Layout.createSequentialGroup()
							.addGap(558)
							.addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 177, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap())
		);
		jPanel2Layout.setVerticalGroup(
			jPanel2Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
					.addGap(32)
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
						.addGroup(jPanel2Layout.createSequentialGroup()
							.addGap(58)
							.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
								.addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
								.addComponent(NameList, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
						.addGroup(jPanel2Layout.createSequentialGroup()
							.addGap(66)
							.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
								.addComponent(ComponentList, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel4, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE))))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
						.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
							.addComponent(jLabel1)
							.addComponent(AppearanceList, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))
						.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
							.addComponent(jLabel2)
							.addComponent(OptionList, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)))
					.addGap(41)
					.addComponent(jButton2)
					.addGap(51)
					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 379, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(34, Short.MAX_VALUE))
		);

		jPanel2.setLayout(jPanel2Layout);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, 1383, Short.MAX_VALUE)
					.addContainerGap())
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
					.addContainerGap())
		);
		getContentPane().setLayout(layout);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	// button search event
	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
		// TODO add your handling code here:
		System.out.print("Button 2 Click\n");
		System.out.println(ValueListComponent);
		System.out.println(ValueListNames);
		System.out.println(ValueListAppearance);
//		String ComponentBreed = ComponentList.getSelectedItem().toString();
//		if(ComponentBreed.equals("Herding Dog")) {
//			ComponentBreed = "Herding_Dog";
//		}else if(ComponentBreed.equals("Therapy Dog")) {
//			ComponentBreed = "Therapy_Dog";
//		}else if(ComponentBreed.equals("Military Working Dog")) {
//			ComponentBreed = "Military_Working_Dog";
//		}else {
//			ComponentBreed = "";
//		}


//		System.out.println(selectValueOption);

//		System.out.println(ValueListOption);
		try {
//        	if ("Assistance_Dog".equals(ValueListComponent)){
//        		System.out.println("เข้าเงื่อนไขเเล้วนะ ไอ้สั0");
//            	if("Hearing_Dog".equals(ValueListNames)){
			if (TempValueBreed == 0) {
				
				if ("Size".equals(ValueListAppearance)) {
					String ComponentApp = OptionList.getSelectedItem().toString();

					String[] tableColumnsName = { "Breed", "Size", "Coat Length", "Active", "Aggressive", "Clever",
							"Hearing_Skill", "Mobility", "Sensitive_Nose", "Strength","Color" };
					DefaultTableModel aModel = (DefaultTableModel) TableComputer.getModel();
					aModel.setColumnIdentifiers(tableColumnsName);
					aModel.setRowCount(0);
					// the query
					System.out.println("Getting WorkingDog Dtail"); // get
					String queryString;
					queryString = "PREFIX ex:<http://localhost/Dogworking#> \n"
							+ "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"
							+ "SELECT  (str(?nameBreed) as ?NameBreed) (str(?coatLength) as ?Coat_Length) (str(?active) as ?Active) (str(?aggressive) as ?Aggressive) (str(?clever) as ?Clever) (str(?hearingSkill) as ?Hearing_Skill) (str(?mobility) as ?Mobility) (str(?sensitiveNose) as ?Sensitive_Nose) (str(?strength) as ?Strength)\n"
							+ "where {?x ex:name \"" + ComponentApp + "\".\n"
//		               + "where {?x ex:name \""+selectValueOption+"\".\n"
							+ "?y ex:hasSize ?x.\n" + "?y ex:hasCoat_Length ?c.                    \n"
							+ "?y ex:hasActive ?a.\n" + "?y ex:hasAggressive ?g.\n" + "?y ex:hasClever ?i.\n"
							+ "?y ex:hasHearing_Skill ?h.\n" + "?y ex:hasMobility ?m.\n"
							+ "?y ex:hasSensitive_Nose ?n.\n" + "?y ex:hasStrength ?p.\n"
							+ "	                                    \n" + "?y ex:name ?nameBreed.\n"
							+ "?c ex:name ?coatLength.\n" + "?a ex:name ?active.\n" + "?g ex:name ?aggressive.\n"
							+ "?i ex:name ?clever.\n" + "?h ex:name ?hearingSkill.\n" + "?m ex:name ?mobility.\n"
							+ "?n ex:name ?sensitiveNose.\n"
							+ "?p ex:name ?strength.                                               	\n" + "}";


					System.out.println(queryString);
					org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); // all method
																								// ExecSparQl from
																								// OpenOWL class
					System.out.println(results.hasNext());
					while (results.hasNext()) {

						QuerySolution sol = results.nextSolution();
						RDFNode Name = sol.get("NameBreed");
						RDFNode Size = sol.get("Size");
						RDFNode Coat_Length = sol.get("Coat_Length");
						RDFNode Active = sol.get("Active");
						RDFNode Aggressive = sol.get("Aggressive");
						RDFNode Clever = sol.get("Clever");
						RDFNode Hearing_Skill = sol.get("Hearing_Skill");
						RDFNode Mobility = sol.get("Mobility");
						RDFNode Sensitive_Nose = sol.get("Sensitive_Nose");
						RDFNode Strength = sol.get("Strength");
						
						String k = Name.toString();
						 String[] arrOfStr = k.split(" ");
						 StringBuffer temp = new StringBuffer();
						 for (int r =0; r< arrOfStr.length;r++) {
							 if(r == arrOfStr.length-1) {
								temp.append(arrOfStr[r]); 
							 }else {
								 temp.append(arrOfStr[r]); 
								 temp.append("_");
							 }
							 
					      }
						 String str = temp.toString();
						 String strColor =ListColor( str);
						System.out.println(Name + " " + ValueListOption + " " + Coat_Length + " " + Active + " "
								+ Aggressive + " " + Clever + " " + Hearing_Skill + " " + Mobility + " "
								+ Sensitive_Nose + " " + Strength+" "+strColor);
						aModel.addRow(new Object[] { Name, ValueListOption, Coat_Length, Active, Aggressive, Clever,
								Hearing_Skill, Mobility, Sensitive_Nose, Strength,strColor });

						TableComputer.setModel(aModel);

					}

				} else if ("Coat_Length".equals(ValueListAppearance)) {
					String ComponentApp = OptionList.getSelectedItem().toString();

					String[] tableColumnsName = { "Breed", "Size", "Coat_Length", "Active", "Aggressive", "Clever",
							"Hearing_Skill", "Mobility", "Sensitive_Nose", "Strength" ,"Color"};
					DefaultTableModel aModel = (DefaultTableModel) TableComputer.getModel();
					aModel.setColumnIdentifiers(tableColumnsName);
					aModel.setRowCount(0);
					// the query
					System.out.println("Getting WorkingDog Dtail"); // get
					String queryString;
					queryString = "PREFIX ex:<http://localhost/Dogworking#> \n"
							+ "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"
							+ "SELECT  (str(?nameBreed) as ?NameBreed) (str(?size) as ?Size) (str(?coatLength) as ?Coat_Length) (str(?active) as ?Active) (str(?aggressive) as ?Aggressive) (str(?clever) as ?Clever) (str(?hearingSkill) as ?Hearing_Skill) (str(?mobility) as ?Mobility) (str(?sensitiveNose) as ?Sensitive_Nose) (str(?strength) as ?Strength)\n"
							+ "where {?c ex:name \"" + ComponentApp + "\".\n"
//		                        		+ "where {?x ex:name \""+selectValueOption+"\".\n"

							+ "?y ex:hasCoat_Length ?c. \n" 
							+ "?y ex:hasSize ?x.\n"
							+ "?y ex:hasActive ?a.\n" 
							+ "?y ex:hasAggressive ?g.\n" 
							+ "?y ex:hasClever ?i.\n"
							+ "?y ex:hasHearing_Skill ?h.\n"
							+ "?y ex:hasMobility ?m.\n"
							+ "?y ex:hasSensitive_Nose ?n.\n" 
							+ "?y ex:hasStrength ?p.\n"
							+ "?x ex:name ?size.\n"
							+ "?y ex:name ?nameBreed.\n" 
							+ "?c ex:name ?coatLength.\n" 
							+ "?a ex:name ?active.\n"
							+ "?g ex:name ?aggressive.\n" 
							+ "?i ex:name ?clever.\n" 
							+ "?h ex:name ?hearingSkill.\n"
							+ "?m ex:name ?mobility.\n" 
							+ "?n ex:name ?sensitiveNose.\n"
							+ "?p ex:name ?strength.                                               	\n" + "}";

					System.out.println(queryString);
					org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); // all method
																								// ExecSparQl from
																								// OpenOWL class
					System.out.println(results.hasNext());
					while (results.hasNext()) {

						QuerySolution sol = results.nextSolution();
						RDFNode Name = sol.get("NameBreed");
						RDFNode Size = sol.get("Size");
						RDFNode Coat_Length = sol.get("Coat_Length");
						RDFNode Active = sol.get("Active");
						RDFNode Aggressive = sol.get("Aggressive");
						RDFNode Clever = sol.get("Clever");
						RDFNode Hearing_Skill = sol.get("Hearing_Skill");
						RDFNode Mobility = sol.get("Mobility");
						RDFNode Sensitive_Nose = sol.get("Sensitive_Nose");
						RDFNode Strength = sol.get("Strength");
						String k = Name.toString();
						 String[] arrOfStr = k.split(" ");
						 StringBuffer temp = new StringBuffer();
						 for (int r =0; r< arrOfStr.length;r++) {
							 if(r == arrOfStr.length-1) {
								temp.append(arrOfStr[r]); 
							 }else {
								 temp.append(arrOfStr[r]); 
								 temp.append("_");
							 }
							 
					      }
						 String str = temp.toString();
						 String strColor =ListColor( str);
						System.out.println(Name + " " + Size + " " + ValueListOption + " " + Active + " " + Aggressive
								+ " " + Clever + " " + Hearing_Skill + " " + Mobility + " " + Sensitive_Nose + " "
								+ Strength+" "+strColor);
						aModel.addRow(new Object[] { Name, Size, ValueListOption, Active, Aggressive, Clever,
								Hearing_Skill, Mobility, Sensitive_Nose, Strength,strColor });

						TableComputer.setModel(aModel);

					}

				}

			} else if (TempValueBreed == 1 && ValueListOption.equals("")) {
				
				System.out.println("เข้า herd");
				String[] tableColumnsName = { "Breed", "Size", "Coat_Length", "Active", "Aggressive", "Clever",
						"Hearing_Skill", "Mobility", "Sensitive_Nose", "Strength","Color" };
				DefaultTableModel aModel = (DefaultTableModel) TableComputer.getModel();
				aModel.setColumnIdentifiers(tableColumnsName);
				aModel.setRowCount(0);
				// the query
				System.out.println("Getting WorkingDog Dtail"); // get
				String queryString;
				queryString ="PREFIX ex:<http://localhost/Dogworking#> \n"
						+ "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"
						+ "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#> "
						+ "SELECT  (str(?y) as ?Temp) (str(?nameBreed) as ?NameBreed) (str(?coatLength) as ?Coat_Length)  (str(?size) as ?Size) (str(?active) as ?Active) (str(?aggressive) as ?Aggressive) (str(?clever) as ?Clever) (str(?hearingSkill) as ?Hearing_Skill) (str(?mobility) as ?Mobility) (str(?sensitiveNose) as ?Sensitive_Nose) (str(?strength) as ?Strength)\n"
						+ "where {?y rdf:type ex:"+ ValueListComponent +".\n"
						+ "?y ex:hasSize ?s.\n"
						+ "?y ex:hasCoat_Length ?c. \n"
						+ "?y ex:hasActive ?a.\n"
						+ "?y ex:hasAggressive ?g.\n"
						+ "?y ex:hasClever ?i.\n"
						+ "?y ex:hasHearing_Skill ?h.\n"
						+ "?y ex:hasMobility ?m.\n"
						+ "?y ex:hasSensitive_Nose ?n.\n"
						+ "?y ex:hasStrength ?p.\n"
						+ "?y ex:name ?nameBreed.\n"
						+ "?s ex:name ?size.\n"
						+ "?c ex:name ?coatLength.\n"
						+ "?a ex:name ?active.\n"
						+ "?g ex:name ?aggressive.\n"
						+ "?i ex:name ?clever.\n"
						+ "?h ex:name ?hearingSkill.\n"
						+ "?m ex:name ?mobility.\n"
						+ "?n ex:name ?sensitiveNose.\n"
						+ "?p ex:name ?strength.        \n"
						+ "}";
				System.out.println(queryString);
				org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); // all method

				System.out.println(results.hasNext());
				while (results.hasNext()) {

					QuerySolution sol = results.nextSolution();
					RDFNode Temp = sol.get("Temp");
					RDFNode Name = sol.get("NameBreed");
					RDFNode Size = sol.get("Size");
					RDFNode Coat_Length = sol.get("Coat_Length");
					RDFNode Active = sol.get("Active");
					RDFNode Aggressive = sol.get("Aggressive");
					RDFNode Clever = sol.get("Clever");
					RDFNode Hearing_Skill = sol.get("Hearing_Skill");
					RDFNode Mobility = sol.get("Mobility");
					RDFNode Sensitive_Nose = sol.get("Sensitive_Nose");
					RDFNode Strength = sol.get("Strength");
					String k = Name.toString();
					 String[] arrOfStr = k.split(" ");
					 StringBuffer temp = new StringBuffer();
					 for (int r =0; r< arrOfStr.length;r++) {
						 if(r == arrOfStr.length-1) {
							temp.append(arrOfStr[r]); 
						 }else {
							 temp.append(arrOfStr[r]); 
							 temp.append("_");
						 }
						 
				      }
					 String str = temp.toString();
					 String strColor =ListColor( str);
					System.out.println(Name + " " + Size + " " + Coat_Length + " " + Active + " " + Aggressive
							+ " " + Clever + " " + Hearing_Skill + " " + Mobility + " " + Sensitive_Nose + " "
							+ Strength+" "+strColor);
					aModel.addRow(new Object[] { Name, Size, Coat_Length, Active, Aggressive, Clever,
							Hearing_Skill, Mobility, Sensitive_Nose, Strength,strColor });

					TableComputer.setModel(aModel);

				}


			}else if (TempValueBreed == 2 && ValueListOption.equals("")) {
				System.out.println("เข้า herd");
				String[] tableColumnsName = { "Breed", "Size", "Coat_Length", "Active", "Aggressive", "Clever",
						"Hearing_Skill", "Mobility", "Sensitive_Nose", "Strength","Color" };
				DefaultTableModel aModel = (DefaultTableModel) TableComputer.getModel();
				aModel.setColumnIdentifiers(tableColumnsName);
				aModel.setRowCount(0);
				// the query
				System.out.println("Getting WorkingDog Dtail"); // get
				String queryString;
				queryString ="PREFIX ex:<http://localhost/Dogworking#> \n"
						+ "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"
						+ "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#> "
						+ "SELECT  (str(?nameBreed) as ?NameBreed) (str(?coatLength) as ?Coat_Length)  (str(?size) as ?Size) (str(?active) as ?Active) (str(?aggressive) as ?Aggressive) (str(?clever) as ?Clever) (str(?hearingSkill) as ?Hearing_Skill) (str(?mobility) as ?Mobility) (str(?sensitiveNose) as ?Sensitive_Nose) (str(?strength) as ?Strength)\n"
						+ "where {?y rdf:type ex:"+ ValueListNames +".\n"
						+ "?y ex:hasSize ?s.\n"
						+ "?y ex:hasCoat_Length ?c. \n"
						+ "?y ex:hasActive ?a.\n"
						+ "?y ex:hasAggressive ?g.\n"
						+ "?y ex:hasClever ?i.\n"
						+ "?y ex:hasHearing_Skill ?h.\n"
						+ "?y ex:hasMobility ?m.\n"
						+ "?y ex:hasSensitive_Nose ?n.\n"
						+ "?y ex:hasStrength ?p.\n"
						+ "?y ex:name ?nameBreed.\n"
						+ "?s ex:name ?size.\n"
						+ "?c ex:name ?coatLength.\n"
						+ "?a ex:name ?active.\n"
						+ "?g ex:name ?aggressive.\n"
						+ "?i ex:name ?clever.\n"
						+ "?h ex:name ?hearingSkill.\n"
						+ "?m ex:name ?mobility.\n"
						+ "?n ex:name ?sensitiveNose.\n"
						+ "?p ex:name ?strength.        \n"
						+ "}";
				System.out.println(queryString);
				org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); // all method
																							// ExecSparQl from
																							// OpenOWL class
				System.out.println(results.hasNext());
				while (results.hasNext()) {

					QuerySolution sol = results.nextSolution();
					RDFNode Name = sol.get("NameBreed");
					RDFNode Size = sol.get("Size");
					RDFNode Coat_Length = sol.get("Coat_Length");
					RDFNode Active = sol.get("Active");
					RDFNode Aggressive = sol.get("Aggressive");
					RDFNode Clever = sol.get("Clever");
					RDFNode Hearing_Skill = sol.get("Hearing_Skill");
					RDFNode Mobility = sol.get("Mobility");
					RDFNode Sensitive_Nose = sol.get("Sensitive_Nose");
					RDFNode Strength = sol.get("Strength");
					String k = Name.toString();
					 String[] arrOfStr = k.split(" ");
					 StringBuffer temp = new StringBuffer();
					 for (int r =0; r< arrOfStr.length;r++) {
						 if(r == arrOfStr.length-1) {
							temp.append(arrOfStr[r]); 
						 }else {
							 temp.append(arrOfStr[r]); 
							 temp.append("_");
						 }
						 
				      }
					 String str = temp.toString();
					 String strColor =ListColor( str);
					System.out.println(Name + " " + Size + " " + Coat_Length + " " + Active + " " + Aggressive
							+ " " + Clever + " " + Hearing_Skill + " " + Mobility + " " + Sensitive_Nose + " "
							+ Strength+" "+strColor);
					aModel.addRow(new Object[] { Name, Size, Coat_Length, Active, Aggressive, Clever,
							Hearing_Skill, Mobility, Sensitive_Nose, Strength ,strColor});

					TableComputer.setModel(aModel);

				}


			}else if (!(TempValueBreed == 0) && !(ValueListOption.equals("")) ) {
				if(TempValueBreed == 1) {
					 String selectValueOption = OptionList.getSelectedItem().toString();
				System.out.println("เข้า herd");
				String[] tableColumnsName = { "Breed", "Size", "Coat_Length", "Active", "Aggressive", "Clever",
						"Hearing_Skill", "Mobility", "Sensitive_Nose", "Strength" ,"Color"};
				DefaultTableModel aModel = (DefaultTableModel) TableComputer.getModel();
				aModel.setColumnIdentifiers(tableColumnsName);
				aModel.setRowCount(0);
				// the query
				System.out.println("Getting WorkingDog Dtail"); // get
				String queryString;
				queryString ="PREFIX ex:<http://localhost/Dogworking#> \n"
						+ "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"
						+ "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#> SELECT  (str(?nameBreed) as ?NameBreed) (str(?Coat_Length) as ?CoatLength)  (str(?Size) as ?SiZe) (str(?active) as ?Active) (str(?aggressive) as ?Aggressive) (str(?clever) as ?Clever) (str(?hearingSkill) as ?Hearing_Skill) (str(?mobility) as ?Mobility) (str(?sensitiveNose) as ?Sensitive_Nose) (str(?strength) as ?Strength)\n"
						+ "where {?y rdf:type ex:"+ValueListComponent+".\n"
						+ "?y ex:hasSize ?s.\n"
						+ "?y ex:hasCoat_Length ?c. \n"
						+ "?y ex:hasActive ?a.\n"
						+ "?y ex:hasAggressive ?g.\n"
						+ "?y ex:hasClever ?i.\n"
						+ "?y ex:hasHearing_Skill ?h.\n"
						+ "?y ex:hasMobility ?m.\n"
						+ "?y ex:hasSensitive_Nose ?n.\n"
						+ "?y ex:hasStrength ?p.\n"
						+ "?y ex:name ?nameBreed.\n"
						+ "?s ex:name ?Size.\n"
						+ "?c ex:name ?Coat_Length.\n"
						+ "?a ex:name ?active.\n"
						+ "?g ex:name ?aggressive.\n"
						+ "?i ex:name ?clever.\n"
						+ "?h ex:name ?hearingSkill.\n"
						+ "?m ex:name ?mobility.\n"
						+ "?n ex:name ?sensitiveNose.\n"
						+ "?p ex:name ?strength.  \n"
						+ "\n"
						+ "FILTER (str(?"+ValueListAppearance+") = \""+selectValueOption+"\")\n"
						+ "}";
				System.out.println(queryString);
				org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); // all method
																							// ExecSparQl from
																							// OpenOWL class
				System.out.println(results.hasNext());
				while (results.hasNext()) {

					QuerySolution sol = results.nextSolution();
					RDFNode Name = sol.get("NameBreed");
					RDFNode Size = sol.get("SiZe");
					RDFNode Coat_Length = sol.get("CoatLength");
					RDFNode Active = sol.get("Active");
					RDFNode Aggressive = sol.get("Aggressive");
					RDFNode Clever = sol.get("Clever");
					RDFNode Hearing_Skill = sol.get("Hearing_Skill");
					RDFNode Mobility = sol.get("Mobility");
					RDFNode Sensitive_Nose = sol.get("Sensitive_Nose");
					RDFNode Strength = sol.get("Strength");
					String k = Name.toString();
					 String[] arrOfStr = k.split(" ");
					 StringBuffer temp = new StringBuffer();
					 for (int r =0; r< arrOfStr.length;r++) {
						 if(r == arrOfStr.length-1) {
							temp.append(arrOfStr[r]); 
						 }else {
							 temp.append(arrOfStr[r]); 
							 temp.append("_");
						 }
						 
				      }
					 String str = temp.toString();
					 String strColor =ListColor( str);
					System.out.println(Name + " " + Size + " " + Coat_Length + " " + Active + " " + Aggressive
							+ " " + Clever + " " + Hearing_Skill + " " + Mobility + " " + Sensitive_Nose + " "
							+ Strength+" "+strColor);
					aModel.addRow(new Object[] { Name, Size, Coat_Length, Active, Aggressive, Clever,
							Hearing_Skill, Mobility, Sensitive_Nose, Strength,strColor });

					TableComputer.setModel(aModel);

				}
			}else if(TempValueBreed == 2) {
				 String selectValueOption = OptionList.getSelectedItem().toString();
					System.out.println("เข้า herd");
					String[] tableColumnsName = { "Breed", "Size", "Coat_Length", "Active", "Aggressive", "Clever",
							"Hearing_Skill", "Mobility", "Sensitive_Nose", "Strength","Color" };
					DefaultTableModel aModel = (DefaultTableModel) TableComputer.getModel();
					aModel.setColumnIdentifiers(tableColumnsName);
					aModel.setRowCount(0);
					// the query
					System.out.println("Getting WorkingDog Dtail"); // get
					String queryString;
					queryString ="PREFIX ex:<http://localhost/Dogworking#> \n"
							+ "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"
							+ "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#> SELECT  (str(?nameBreed) as ?NameBreed) (str(?Coat_Length) as ?CoatLength)  (str(?Size) as ?SiZe) (str(?active) as ?Active) (str(?aggressive) as ?Aggressive) (str(?clever) as ?Clever) (str(?hearingSkill) as ?Hearing_Skill) (str(?mobility) as ?Mobility) (str(?sensitiveNose) as ?Sensitive_Nose) (str(?strength) as ?Strength)\n"
							+ "where {?y rdf:type ex:"+ValueListNames+".\n"
							+ "?y ex:hasSize ?s.\n"
							+ "?y ex:hasCoat_Length ?c. \n"
							+ "?y ex:hasActive ?a.\n"
							+ "?y ex:hasAggressive ?g.\n"
							+ "?y ex:hasClever ?i.\n"
							+ "?y ex:hasHearing_Skill ?h.\n"
							+ "?y ex:hasMobility ?m.\n"
							+ "?y ex:hasSensitive_Nose ?n.\n"
							+ "?y ex:hasStrength ?p.\n"
							+ "?y ex:name ?nameBreed.\n"
							+ "?s ex:name ?Size.\n"
							+ "?c ex:name ?Coat_Length.\n"
							+ "?a ex:name ?active.\n"
							+ "?g ex:name ?aggressive.\n"
							+ "?i ex:name ?clever.\n"
							+ "?h ex:name ?hearingSkill.\n"
							+ "?m ex:name ?mobility.\n"
							+ "?n ex:name ?sensitiveNose.\n"
							+ "?p ex:name ?strength.  \n"
							+ "\n"
							+ "FILTER (str(?"+ValueListAppearance+") = \""+selectValueOption+"\")\n"
							+ "}";
					System.out.println(queryString);
					org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); // all method
																								// ExecSparQl from
																								// OpenOWL class
					System.out.println(results.hasNext());
					while (results.hasNext()) {

						QuerySolution sol = results.nextSolution();
						RDFNode Name = sol.get("NameBreed");
						RDFNode Size = sol.get("SiZe");
						RDFNode Coat_Length = sol.get("CoatLength");
						RDFNode Active = sol.get("Active");
						RDFNode Aggressive = sol.get("Aggressive");
						RDFNode Clever = sol.get("Clever");
						RDFNode Hearing_Skill = sol.get("Hearing_Skill");
						RDFNode Mobility = sol.get("Mobility");
						RDFNode Sensitive_Nose = sol.get("Sensitive_Nose");
						RDFNode Strength = sol.get("Strength");
						String k = Name.toString();
						 String[] arrOfStr = k.split(" ");
						 StringBuffer temp = new StringBuffer();
						 for (int r =0; r< arrOfStr.length;r++) {
							 if(r == arrOfStr.length-1) {
								temp.append(arrOfStr[r]); 
							 }else {
								 temp.append(arrOfStr[r]); 
								 temp.append("_");
							 }
							 
					      }
						 String str = temp.toString();
						 String strColor =ListColor( str);
						System.out.println(Name + " " + Size + " " + Coat_Length + " " + Active + " " + Aggressive
								+ " " + Clever + " " + Hearing_Skill + " " + Mobility + " " + Sensitive_Nose + " "
								+ Strength+" "+strColor);
						aModel.addRow(new Object[] { Name, Size, Coat_Length, Active, Aggressive, Clever,
								Hearing_Skill, Mobility, Sensitive_Nose, Strength ,strColor});

						TableComputer.setModel(aModel);

					}
			}
			}

//            	}
//        	}	
//        	
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	// GEN-LAST:event_jButton2ActionPerformed

	private void NameListActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_NameListActionPerformed
		String selectValue = NameList.getSelectedItem().toString();
		if (selectValue.equals("Sled Dog")) {
			ValueListNames = "Sled_Dog";
		} else if (selectValue.equals("Guide Dog")) {
			ValueListNames = "Guide_Dog";
		} else if (selectValue.equals("Draught Dog")) {
			ValueListNames = "Draught_Dog";
		} else if (selectValue.equals("Mobility Assistance Dog")) {
			ValueListNames = "Mobility_Assistance_Dog";
		} else if (selectValue.equals("Guard Dog")) {
			ValueListNames = "Guard_Dog";
		} else if (selectValue.equals("Medical Response Dog")) {
			ValueListNames = "Medical_response_Dog";
		} else if (selectValue.equals("Hearing Dog")) {
			ValueListNames = "Hearing_Dog";
		} else if (selectValue.equals("Trackers Dog")) {
			ValueListNames = "Trackers_Dog";
		} else if (selectValue.equals("Detective Dog")) {
			ValueListNames = "Detective_Dog";
		} else if (selectValue.equals("Search And Rescue Dog")) {
			ValueListNames = "Search_and_Rescue_Dog";
		} else if (selectValue.equals("Bird Dog")) {
			ValueListNames = "Bird_Dog";
		} else if (selectValue.equals("Terriers Dog")) {
			ValueListNames = "Terriers_Dog";
		} else {
			ValueListNames = "";
		}
		System.out.println(ValueListNames);
		// TODO add your handling code here:
	}// GEN-LAST:event_NameListActionPerformed

	private void OptionListActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_OptionListActionPerformed
    	 String selectValueOption = OptionList.getSelectedItem().toString();
         System.out.println(selectValueOption); //short coat length
    	if(selectValueOption.equals("Small Size")) {
    		ValueListOption = "Small_Size";
    	}
	    else if(selectValueOption.equals("Medium Size")) {
	    	ValueListOption = "Medium_Size";
	    }else if(selectValueOption.equals("Large Size")) {
	    	ValueListOption = "Large_Size";
	    }else if(selectValueOption.equals("Giant Size")) {
	    	ValueListOption = "Giant_Size";
	    }else if(selectValueOption.equals("Short Coat Length")) {
	    	ValueListOption = "Short_Coat_Length";
	    }else if(selectValueOption.equals("Medium Coat Length")) {
	    	ValueListOption = "Medium_Coat_Length";
	    }else if(selectValueOption.equals("Long Coat Length")) {
	    	ValueListOption = "Long_Coat_Length";
	    }else {
	    	ValueListOption = "";
	    }
    	System.out.println(ValueListOption);
		// TODO add your handling code here:
	}// GEN-LAST:event_OptionListActionPerformed

	private void ComponentListActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ComponentListActionPerformed
		// TODO add your handling code here:

		String selectValue = ComponentList.getSelectedItem().toString();
		System.out.println(selectValue);
		int i = 0;
		if (selectValue.equals("Assistance Dog")) {
			ValueListComponent = "Asistance_Dog";
			TempValueBreed = 2;
			i = 1;
		} else if (selectValue.equals("Carriag Dog")) {
			ValueListComponent = "Carriag_Dog";
			i = 1;
			TempValueBreed = 2;
		} else if (selectValue.equals("Hound Dog")) {
			ValueListComponent = "Hound_Dog";
			i = 1;
			TempValueBreed = 2;
		} else if (selectValue.equals("Rescue Dog")) {
			ValueListComponent = "Rescue_Dog";
			i = 1;
			TempValueBreed = 2;
		} else if (selectValue.equals("-")) {
			i=0;
			TempValueBreed = 0;
			NameList.removeAllItems();
			//NameList.addItem("-");
		} else {
			i=0;
			NameList.removeAllItems();
			TempValueBreed = 1;
			if(selectValue.equals("Herding Dog")) {
				ValueListComponent = "Herding_Dog";
			}else if(selectValue.equals("Therapy Dog")) {
				ValueListComponent = "Therapy_Dog";
			}else if(selectValue.equals("Military Working Dog")) {
				ValueListComponent = "Military_Working_Dog";
			}else {
				ValueListComponent = "";
			}
			//NameList.addItem("-");
		}
		System.out.println("Value of List Comonance : " +ValueListComponent);
		System.out.println("Value of TempBreed " + TempValueBreed);
		if (i == 1) {
			ListNames.removeAll(ListNames);

			try {
				// OntModel model = OpenOWL.OpenConnectOWL();

				System.out.println("Getting ListComponentNames"); // get the name list querry
				String queryString;
				queryString = "PREFIX Dogworking: <http://localhost/Dogworking#> "
						+ "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#> "
						+ "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> "
						+ "SELECT  (str(?y) as ?NameComponent) " + "where { ?x rdfs:subClassOf Dogworking:"
						+ ValueListComponent + ". " + " ?x rdfs:label ?y." + " }";

				org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); // all method ExecSparQl from
																							// OpenOWL class

				while (results.hasNext()) {

					QuerySolution soln = results.nextSolution();
					String NameOfComponent = soln.getLiteral("NameComponent").getString();
					// test --
					System.out.println("Name Component " + NameOfComponent.toString());
					ListNames.add(NameOfComponent.toString());

					RDFNode x = soln.get("Propertyval");

					String xx = String.valueOf(x);

					java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);

					String xs = xxx.toString();

				}
				System.out.println(ListNames);
				NameList.removeAllItems(); // combobox nameList

				for (int j = 1; j < ListNames.size(); j++) {

					NameList.addItem(ListNames.get(j));
				}
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}

	}// GEN-LAST:event_ComponentListActionPerformed
	private String ListColor( String str) {
		 
		 StringBuffer sb = new StringBuffer();
		 String queryString;
		 // all method
		// ExecSparQl from
			// OpenOWL class
		queryString = 
				"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
				+ "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n"
				+ "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n"
				+ "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n"
				+ "PREFIX DogWorking: <http://localhost/Dogworking#>\n"
				+ "SELECT ?Beagle (str(?name) as ?Color) \n"
				+ "WHERE {\n"
				+ "	?Beagle rdf:type DogWorking:"+ValueListComponent+";\n"
				+ "	DogWorking:hasColor ?color;\n"
				+ "FILTER (regex(str(?Beagle), \""+str+"\"))\n"
				 + "?color DogWorking:name ?name " 
				+ "}";
		System.out.println(queryString);
		org.apache.jena.query.ResultSet result = OpenOWL.ExecSparQl(queryString); 
		result = OpenOWL.ExecSparQl(queryString); // all method															// OpenOWL class
		System.out.println(result.hasNext());
		while (result.hasNext()) {
			QuerySolution sol = result.nextSolution();
			RDFNode Color = sol.get("Color");
			String k= Color.toString();
			 sb.append(k);
	         sb.append(" ");
		}
		String strColor = sb.toString();
		return strColor;
	}
	private void AppearanceListActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ComponentListActionPerformed
		// TODO add your handling code here:

		String selectValue = AppearanceList.getSelectedItem().toString();
		System.out.println(selectValue);

		ListOption.removeAll(ListOption);
		OptionList.removeAllItems();
		int i = 0;
		if (selectValue.equals("Coat Length")) {
			ValueListAppearance = "Coat_Length";
			i = 1;
		} else if (selectValue.equals("Size")) {
			ValueListAppearance = "Size";
			i = 1;
		} else {
			OptionList.removeAllItems();
		}
		System.out.println(i);
		System.out.println(ValueListAppearance);
		if (i == 1) {
			try {
				// OntModel model = OpenOWL.OpenConnectOWL();

				System.out.println("Getting ListAppearanceNames"); // get the name list querry
				String queryString;
				queryString = "PREFIX Dogworking: <http://localhost/Dogworking#> "
						+ "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> "
						+ "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#> " + "SELECT  (str(?y) as ?TypeOp) "
						+ "where { ?x rdf:type Dogworking:" + ValueListAppearance + ". " + "?x Dogworking:name ?y."
						+ " }";

				org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); // all method ExecSparQl from
																							// OpenOWL class

				while (results.hasNext()) {
					System.out.println("Start Checking");
					QuerySolution soln = results.nextSolution();
					String NameOfComponent = soln.getLiteral("TypeOp").getString();
					// test --
					System.out.println("Name TypeOp " + NameOfComponent.toString());
					ListOption.add(NameOfComponent.toString());

					RDFNode x = soln.get("Propertyval");

					String xx = String.valueOf(x);

					java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);

					String xs = xxx.toString();

				}
				System.out.println(ListOption);
				//OptionList.removeAllItems(); // combobox nameList

				for (int j = 0; j < ListOption.size(); j++) {

					OptionList.addItem(ListOption.get(j));
				}
			} catch (Exception ex) {
				ex.printStackTrace();
			}

		} // GEN-LAST:event_ComponentListActionPerformed
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(DisplayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(DisplayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(DisplayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(DisplayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new DisplayFrame().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JComboBox<String> ComponentList;
	private javax.swing.JComboBox<String> OptionList;
	private javax.swing.JComboBox<String> AppearanceList;
	private javax.swing.JComboBox<String> NameList;
	private javax.swing.JTable TableComputer;
	private javax.swing.JButton jButton2;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
}
